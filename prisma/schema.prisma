// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String   @id @default(uuid())
  userId             String
  provider           String   // e.g. "google", "github", "credentials"
  providerAccountId  String   // e.g. Google user ID
  type               String   // "oauth" | "credentials"
  accessToken        String?
  refreshToken       String?
  expiresAt          DateTime?
  tokenType          String?
  scope              String?
  idToken            String?
  sessionState       String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId]) // Each provider account is unique
}


model User {
  id          String     @id @default(uuid())
  name        String?
  email       String     @unique
  avatarUrl   String?
  bannerUrl   String?
  phone       String?
  bio         String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  accounts     Account[]
  sessions     Session[]
  enrollments  Enrollment[]
  courses      Course[]   @relation("InstructorCourses")
}


model Session {
  id        String   @id @default(uuid())
  userId    String
  jwtToken  String
  createdAt DateTime @default(now())
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id])
}


model Course {
  id            String     @id @default(uuid())
  title         String
  description   String
  thumbnail     String?
  thumblow      String?
  thumbblur     String?
  instructorId  String
  instructor    User       @relation("InstructorCourses", fields: [instructorId], references: [id])
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  lessons       Lesson[]
  enrollments   Enrollment[]
  isPublished   Boolean    @default(false)
  price         Float      @default(0)
  duration      Int
  category      String
}

model Lesson {
  id         String   @id @default(uuid())
  title      String
  content    String
  videos     Video[]
  order      Int
  courseId   String
  course     Course   @relation(fields: [courseId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Video {
  id String @id @default(uuid())
  title String
  description String?
  videourl String?
  order Int
  lessonId String
  lesson Lesson @relation(fields: [lessonId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Enrollment {
  id         String   @id @default(uuid())
  userId     String
  courseId   String
  enrolledAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
}


